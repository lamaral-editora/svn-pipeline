pipeline {
    agent { label 'master' }
    environment { 
     	SVN_CREDENTIALS = credentials('a19243f7-481e-4fcb-ae40-d47d127d5cb1')
     	SVN_SERVER="infosvn"
     	SVN_PERMFILE="/opt/svn/authz"
    }
    parameters {
        validatingString(defaultValue: '', description: 'Insira o email do usuario que possui as permissões', failedValidationMessage: 'Inserir um email valido', name: 'EMAILORIGEM', regex: '[a-zA-Z0-9\\.\\@]+')
        validatingString(defaultValue: '', description: 'Insira o email do usuario que deve receber as novas permissões', failedValidationMessage: 'Inserir um email valido', name: 'EMAILDESTINO', regex: '[a-zA-Z0-9\\.\\@]+')
    }
    stages {
        stage('Check for configuration run'){
            when {
                expression { params.EMAILORIGEM == "email@dry.run" || params.EMAILORIGEM == "" }
            }
            steps{
                script{
                    currentBuild.result = 'ABORTED'
                    error('DRY RUN COMPLETED. JOB PARAMETERIZED.')
                }
            }
        }
        stage('Clone Repository SVN - SSHKEYS'){
            steps{
                    checkout([$class: 'SubversionSCM', 
                        locations: [[credentialsId: 'e97eb477-7c2c-42f5-abf8-8cbf7486a874',
                                    local: 'ssh_keys',
                                    remote: "http://infosvn/svn/EquipeQA/chaves_ssh_containers/tfsservice/"]], 
                        workspaceUpdater: [$class: 'UpdateUpdater']])
            }
        }
        stage('Copying SVN Permissions') {
            steps{
                script{
				    env.TESTE = sh(label:"Obtendo login a partir do email origem", returnStdout: true, script: " set +x ; echo ${params.EMAILORIGEM} | cut -d'@' -f2").trim()
					if ( env.TESTE == 'dclick.com.br' ){
					    env.AUX = sh(label:"Obtendo login a partir do email origem", returnStdout: true, script: " set +x ; echo ${params.EMAILORIGEM} | cut -d'@' -f1").trim()
						env.LOGINORIGEM  = sh(label:"Adicionando sufixo", returnStdout: true, script: " set +x ; echo ${env.AUX}'.dclick'").trim()
						env.LOGINDESTINO = sh(label:"Obtendo login a partir do email destino", returnStdout: true, script: " set +x ; echo ${params.EMAILDESTINO} | cut -d'@' -f1").trim()
					} else {
                        env.LOGINORIGEM  = sh(label:"Obtendo login a partir do email origem", returnStdout: true, script: " set +x ; echo ${params.EMAILORIGEM} | cut -d'@' -f1").trim()
                        env.LOGINDESTINO = sh(label:"Obtendo login a partir do email destino", returnStdout: true, script: " set +x ; echo ${params.EMAILDESTINO} | cut -d'@' -f1").trim()
                    }
					sh ("set +x ; chmod 0600 ${WORKSPACE}/ssh_keys/id_rsa ; ssh -i ${WORKSPACE}/ssh_keys/id_rsa -o BatchMode=yes -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null tfsservice@${SVN_SERVER} \"sed '/[/]/q' ${SVN_PERMFILE} | head -n -1 | sed -e 's/${env.LOGINORIGEM}/${env.LOGINORIGEM},${env.LOGINDESTINO}/g' > /tmp/groups.txt \"")
                    sh ("set +x ; p=\$(echo '\$p' ) ; chmod 0600 ${WORKSPACE}/ssh_keys/id_rsa ; ssh -i ${WORKSPACE}/ssh_keys/id_rsa -o BatchMode=yes -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null tfsservice@${SVN_SERVER} \"sed -n -e '/[/]/,\$p' ${SVN_PERMFILE} > /tmp/repositories.txt \"")
                    sh ("set +x ; chmod 0600 ${WORKSPACE}/ssh_keys/id_rsa ; ssh -i ${WORKSPACE}/ssh_keys/id_rsa -o BatchMode=yes -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null tfsservice@${SVN_SERVER} \"sudo sh -c 'cat /tmp/groups.txt > /opt/svn/authz' ; sudo sh -c 'cat /tmp/repositories.txt >> /opt/svn/authz' \"")
                }
			}
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}